<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git本地项目上传</title>
      <link href="/2021/06/26/git-local-project-upload/"/>
      <url>/2021/06/26/git-local-project-upload/</url>
      
        <content type="html"><![CDATA[<p>1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'first commit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、关联到远程库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 你的远程库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/xxx/xxx-demo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、状态查询命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备：详细请参考 <a href="http://www.cnblogs.com/tugenhua0707/p/4050072.html">http://www.cnblogs.com/tugenhua0707/p/4050072.html</a></p><p> <img src="https://images2018.cnblogs.com/blog/359884/201711/359884-20171128123923050-1074438610.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes环境搭建</title>
      <link href="/2021/06/26/kubernetes-install-01/"/>
      <url>/2021/06/26/kubernetes-install-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境搭建前期准备"><a href="#1-环境搭建前期准备" class="headerlink" title="1. 环境搭建前期准备"></a>1. 环境搭建前期准备</h2><h3 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h3><ul><li>Kubernetes 1.11.2</li><li>Docker 18.06.0-ce</li><li>Etcd v3.3.9</li><li>Flanneld v0.10.0</li><li>TLS 认证通信（所有组件，如etcd、kubernetes master 和node）</li><li>RBAC 授权</li><li>kubelet TLS Bootstrapping</li><li>kubedns v1.14.10、dashboard v1.10.0、heapster v1.5.4等插件</li></ul><h3 id="etcd-集群-amp-amp-k8s-master-机器-amp-amp-k8s-node-机器"><a href="#etcd-集群-amp-amp-k8s-master-机器-amp-amp-k8s-node-机器" class="headerlink" title="etcd 集群 &amp;&amp; k8s master 机器 &amp;&amp; k8s node 机器"></a>etcd 集群 &amp;&amp; k8s master 机器 &amp;&amp; k8s node 机器</h3><ul><li>master01：ip1</li><li>node01: ip2</li><li>node02: ip3</li><li>node03: ip4</li></ul><h3 id="集群环境变量"><a href="#集群环境变量" class="headerlink" title="集群环境变量"></a>集群环境变量</h3><p>后续部署将会使用到的全局变量，定义如下（根据自己的机器、网络修改）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># TLS Bootstrapping 使用的Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成$ export BOOTSTRAP_TOKEN="8981b594122ebed7596f1d3b69c78223"# 建议使用未用的网段来定义服务网段和Pod 网段# 服务网段(Service CIDR)，部署前路由不可达，部署后集群内部使用IP:Port可达$ export SERVICE_CIDR="10.254.0.0/16"# Pod 网段(Cluster CIDR)，部署前路由不可达，部署后路由可达(flanneld 保证)$ export CLUSTER_CIDR="172.30.0.0/16"# 服务端口范围(NodePort Range)$ export NODE_PORT_RANGE="30000-32766"# etcd集群服务地址列表$ export ETCD_ENDPOINTS="https://ip1:2379,https://ip2:2379,https://ip3:2379"# flanneld 网络配置前缀$ export FLANNEL_ETCD_PREFIX="/kubernetes/network"# kubernetes 服务IP(预先分配，一般为SERVICE_CIDR中的第一个IP)$ export CLUSTER_KUBERNETES_SVC_IP="10.254.0.1"# 集群 DNS 服务IP(从SERVICE_CIDR 中预先分配)$ export CLUSTER_DNS_SVC_IP="10.254.0.2"# 集群 DNS 域名$ export CLUSTER_DNS_DOMAIN="cluster.local."# MASTER API Server 地址$ export MASTER_URL="k8s-api.virtual.local"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建CA-证书和密钥"><a href="#2-创建CA-证书和密钥" class="headerlink" title="2. 创建CA 证书和密钥"></a>2. 创建CA 证书和密钥</h2><p><code>kubernetes</code> 系统各个组件需要使用<code>TLS</code>证书对通信进行加密，这里我们使用<code>CloudFlare</code>的PKI 工具集<a href="https://pkg.cfssl.org/">cfssl</a> 来生成Certificate Authority(CA) 证书和密钥文件， CA 是自签名的证书，用来签名后续创建的其他TLS 证书。</p><h3 id="安装-CFSSL"><a href="#安装-CFSSL" class="headerlink" title="安装 CFSSL"></a>安装 CFSSL</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64$ chmod +x cfssl_linux-amd64$ sudo mv cfssl_linux-amd64 /usr/k8s/bin/cfssl$ wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64$ chmod +x cfssljson_linux-amd64$ sudo mv cfssljson_linux-amd64 /usr/k8s/bin/cfssljson$ wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64$ chmod +x cfssl-certinfo_linux-amd64$ sudo mv cfssl-certinfo_linux-amd64 /usr/k8s/bin/cfssl-certinfo$ export PATH=/usr/k8s/bin:$PATH$ mkdir ssl &amp;&amp; cd ssl$ cfssl print-defaults config &gt; config.json$ cfssl print-defaults csr &gt; csr.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借鉴于<a href="https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster">https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL免安装版部署</title>
      <link href="/2021/06/22/mysql-install-windows/"/>
      <url>/2021/06/22/mysql-install-windows/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL免安装版部署（Windows）"><a href="#MySQL免安装版部署（Windows）" class="headerlink" title="MySQL免安装版部署（Windows）"></a>MySQL免安装版部署（Windows）</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://downloads.mysql.com/archives/community/">MySQL下载地址</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>解压压缩包，并新建my.ini文件以代替my-default.ini文件</p></li><li><p>my.ini文件内容如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token comment">#设置mysql客户端默认字符集</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[mysqld]</span><span class="token comment">#设置3306端口</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token comment">#设置mysql的安装目录</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\\Program Files\\Mysql</span><span class="token comment">#设置mysql数据库的数据的存放目录</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\\Program Files\\Mysql\\data</span><span class="token comment">#允许最大连接数</span><span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span><span class="token comment">#服务端使用的字符集默认为8比特编码的latin1字符集</span><span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token comment">#创建新表时将使用的默认存储引擎</span><span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以管理员身份打开cmd命令窗口，进入到mysql安装目录中，执行如下命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化,此时mysql安装目录下已经自动创建了data文件夹。</span>mysqld --initialize-insecure --user<span class="token operator">=</span>mysql<span class="token comment"># 安装mysql服务，此处注意：是mysqld不是mysql</span>mysqld <span class="token function">install</span><span class="token comment"># 启动mysql服务</span>net start mysql<span class="token comment"># 登录连接mysql客户端</span>mysql -u root -p<span class="token comment"># 进入mysql控制台,修改root用户密码</span>alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'新密码'</span><span class="token comment"># -------其它命令，此处不执行---------</span><span class="token comment"># 停止mysql服务</span>net stop mysql<span class="token comment"># 删除已安装的mysql服务</span>mysqld remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/01/01/hello-world/"/>
      <url>/2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
